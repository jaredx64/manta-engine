#include <object_api.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HEADER_INCLUDES
#include <core/list.hpp>
#include <core/color.hpp>
#include <manta/ui.hpp>

SOURCE_INCLUDES
#include <manta/random.hpp>
#include <manta/draw.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OBJECT( UIWidget_Slider )
PARENT( UIWidget )

CATEGORY( UI )
BUCKET_SIZE( 64 )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INTERNAL STATE

PROTECTED float valueTo = 0.0f;
PROTECTED float value = 0.0f;

PROTECTED int_v2 anchorMouse;
PROTECTED float tweenSlider = 0.0f;
PROTECTED bool sliding = false;

PROTECTED bool isSlidingValue = false;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC STATE

PUBLIC bool vertical = true;
PUBLIC int size = 32;
PUBLIC int steps = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CORE EVENTS

PROTECTED void init()
{
	INHERIT::init();

	// Properties
	sortable = false;

	// Color
	randomize_color();
}


// PROTECTED void free() { INHERIT::free(); }


PROTECTED void update( const Delta delta )
{
	// Interaction State
	const bool isInteractable = is_interactable();
	const bool isHovering = isInteractable && is_hovering();

	// Tweens
	tween( tweenAlert, 0.0f, 0.1f, delta, 0.01f );
	tween( tweenError, 0.0f, 0.1f, delta, 0.01f );
	tween( tweenClick, 0.0f, 0.1f, delta, 0.01f );

	// Positions
	const int_v2 sliderDim = slider_dimensions();
	const int_v2 sliderPos = slider_position( sliderDim );
	const float_v2 b1 = float_v2( x, y ).multiply( context->matrix_get() );
	const float_v2 s1 = float_v2( x + sliderPos.x,
	                            y + sliderPos.y ).multiply( context->matrix_get() );
	const float_v2 s2 = float_v2( x + sliderPos.x + sliderDim.x,
								y + sliderPos.y + sliderDim.y ).multiply( context->matrix_get() );

	// Mouse Interaction
	const float percentMouseX = ( ( mouse_x - anchorMouse.x ) - ( b1.x + sliderDim.x / 2 ) ) / ( width - sliderDim.x );
	const float percentMouseY = ( ( mouse_y - anchorMouse.y ) - ( b1.y + sliderDim.y / 2 ) ) / ( height - sliderDim.y );
	const float percentMouse = clamp( vertical ? percentMouseY : percentMouseX, 0.0f, 1.0f );

	// Hover & Slider Click
	const bool isHoveringSlider = isHovering && point_in_rect( mouse_x, mouse_y, s1.x, s1.y, s2.x, s2.y );

	if( isHovering )
	{
		// Tween
		tween( tweenSlider, isHoveringSlider ? 1.0f : 0.0f, 0.1f, delta, 0.01f );
		tween( tweenHover, sliding || !isHoveringSlider ? 1.0f : 0.0f, 0.1f, delta, 0.01f );

		// Activate Sliding
		if( Mouse::check_pressed( mb_left ) && renderEnabled )
		{
			sliding = true;
			tweenClick = 1.0f;
			if( isHoveringSlider ) { anchorMouse = int_v2 { mouse_x - ( s1.x + s2.x ) / 2,
			                                               mouse_y - ( s1.y + s2.y ) / 2 }; }
		}
	}
	else
	{
		// No hover
		tween( tweenSlider, 0.0f, 1.0f, delta, 0.01f );
		tween( tweenHover, 0.0f, 1.0f, delta, 0.01f );
	}

	// Sliding
	if( Mouse::check_released( mb_left ) || !isInteractable )
	{
		sliding = false;
		anchorMouse = int_v2 { 0, 0 };
	}
	else if( isInteractable && sliding && Mouse::check( mb_left ) )
	{
		// Active sliding
		tweenClick = 1.0f;
		valueTo = steps < 2 ? percentMouse : round( percentMouse * ( steps - 1 ) ) / ( steps - 1 );
	}

	// Scrollbar Position
	const bool slidingValue = tween( value, valueTo, 0.025f, delta, 0.01f );

	// Interact Callback
	if( callbackOnInteract )
	{
		if( ( steps <= 1 && sliding ) || ( !slidingValue && isSlidingValue ) )
		{
			callbackOnInteract( *context, id );
		}
	}
	isSlidingValue = slidingValue;
}


PROTECTED void render( const Delta delta, const Alpha alpha )
{
	// Background Positions
	const int_v2 b1 = int_v2( x, y ).multiply( context->matrix_get() );
	const int_v2 b2 = int_v2( x + width, y + height ).multiply( context->matrix_get() );

	// Slider Positions
	const int_v2 sliderDimensions = slider_dimensions();
	const int_v2 sliderPosition = slider_position( sliderDimensions );

	const int_v2 s1 = int_v2( x + sliderPosition.x,
	                        y + sliderPosition.y ).multiply( context->matrix_get() );
	const int_v2 s2 = int_v2( x + sliderPosition.x + sliderDimensions.x,
	                        y + sliderPosition.y + sliderDimensions.y ).multiply( context->matrix_get() );

	// Colors
	const Color colorMain = color_mix( color_mix( color, c_white, tweenSlider * 0.50f ), c_lime, tweenClick );
	const Color colorBackground = color_mix( color_mix( color, c_white, tweenHover * 0.25f ), c_black, 0.5f );

	// Draw Background
	draw_rectangle( b1.x, b1.y, b2.x, b2.y, color_mix( colorBackground, c_black, locked ? 0.25 : 0.0f ) * alpha );
	draw_rectangle( b1.x, b1.y, b2.x, b2.y, c_black * alpha, true );

	// Draw Steps (TODO: Remove?)
	const int start = vertical ? sliderDimensions.y / 2 : sliderDimensions.x / 2;
	const int range = vertical ? height - sliderDimensions.y : width - sliderDimensions.x;
	for( int i = 0; i < steps; i++ )
	{
		const float ratio = static_cast<float>( i ) / ( steps - 1 );
		const int position = ( vertical ? b1.y : b1.x ) + start + range * ratio;

		if( vertical )
		{
			draw_line( b1.x, position, b2.x, position, Color { 0, 0, 0, 80 } * alpha, 4 );
		}
		else
		{
			draw_line( position, b1.y, position, b2.y, Color { 0, 0, 0, 80 } * alpha, 4 );
		}
	}

	// Draw Slider
	draw_rectangle( s1.x, s1.y, s2.x, s2.y, color_mix( colorMain, c_black, locked ? 0.25 : 0.0f ) * alpha );
	draw_rectangle( s1.x, s1.y, s2.x, s2.y, c_black * alpha, true );

	// Locked Overlay
	if( locked ) { draw_rectangle( b1.x, b1.y, b2.x, b2.y, Color { 0, 0, 0, 150 } * alpha ); }
}


// PROTECTED void apply_matrix() { INHERIT::apply_matrix(); }


// PROTECTED bool contains_point( const float_v2 point ) { }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC API

PUBLIC void set_value( const float v )
{
	valueTo = clamp( v, 0.0f, 1.0f );
}


PUBLIC void set_value_immediate( const float v )
{
	valueTo = clamp( v, 0.0f, 1.0f );
	value = valueTo;
}


PUBLIC void set_value_step( const int step )
{
	if( steps < 2 ) { return; }
	const int stepTo = clamp( step, 0, steps );
	valueTo = clamp( static_cast<float>( stepTo ) / ( steps - 1 ), 0.0f, 1.0f );
}


PUBLIC void set_value_step_immediate( const int step )
{
	if( steps < 2 ) { return; }
	const int stepTo = clamp( step, 0, steps );
	valueTo = clamp( static_cast<float>( stepTo ) / ( steps - 1 ), 0.0f, 1.0f );
	value = valueTo;
}


PUBLIC float get_value()
{
	return value;
}


PUBLIC float get_value_immediate()
{
	return valueTo;
}


PUBLIC int get_value_step()
{
	if( steps < 2 ) { return 0; }
	return static_cast<int>( round( value * ( steps - 1 ) ) );
}


PUBLIC float get_value_step_immediate()
{
	if( steps < 2 ) { return 0; }
	return static_cast<int>( round( valueTo * ( steps - 1 ) ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PRIVATE HELPERS

PRIVATE int_v2 slider_dimensions()
{
	const int w = vertical ? width : size;
	const int h = vertical ? size : height;
	return int_v2 { clamp( w, size, width ), clamp( h, size, height ) };
}


PRIVATE int_v2 slider_position( const int_v2 &dimensions )
{
	return int_v2 { vertical ? 0 : ( width - dimensions.x ) * value,
	               vertical ? ( height - dimensions.y ) * value : 0 };
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////