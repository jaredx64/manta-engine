#include <object_api.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HEADER_INCLUDES
#include <core/list.hpp>
#include <core/color.hpp>
#include <manta/ui.hpp>

SOURCE_INCLUDES
#include <manta/random.hpp>
#include <manta/draw.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OBJECT( UIWidget_Window )
PARENT( UIWidget )

CATEGORY( CategoryUI )
BUCKET_SIZE( 64 )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INTERNAL STATE

PRIVATE enum_type( WindowState, u8 )
{
	WindowState_Resize_None,
	WindowState_Move,
	WindowState_Resize_TopLeft,
	WindowState_Resize_TopRight,
	WindowState_Resize_BottomLeft,
	WindowState_Resize_BottomRight,
	WindowState_Resize_Left,
	WindowState_Resize_Right,
	WindowState_Resize_Top,
	WindowState_Resize_Bottom,
};

PRIVATE int_v2 anchorCorner;
PRIVATE int_v2 anchorMouse;
PRIVATE WindowState state;

PROTECTED int widthMin = 128;
PROTECTED int widthMax = 720;
PROTECTED int heightMin = 128;
PROTECTED int heightMax = 512;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC STATE

PUBLIC bool resizable = true;
PUBLIC int border = 12;

PUBLIC const char *caption = "";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CORE EVENTS

PROTECTED void init()
{
	INHERIT::init();

	// Color
	randomize_color();

	// Properties
	sortable = true;
	container = true;
	resizable = true;
}


// PROTECTED void free() { INHERIT::free(); }


PROTECTED void update( const Delta delta )
{
	// Interaction State
	const bool isInteractable = is_interactable();
	const bool isHovering = isInteractable && is_hovering();

	// Coordinates
	const int_v2 b1 = int_v2( x - border, y - border ).multiply( context->matrix_get() );
	const int_v2 b2 = int_v2( x + width + border, y + height + border ).multiply( context->matrix_get() );
	const int_v2 c1 = int_v2( x, y ).multiply( context->matrix_get() );
	const int_v2 c2 = int_v2( x + width, y + height ).multiply( context->matrix_get() );
	const int_v2 m = { mouse_x, mouse_y };

	// Apply State
	if( isHovering )
	{
		if( Mouse::check_pressed( mb_left ) )
		{
			// Reset State
			state = WindowState_Resize_None;

			// Move State
			if( point_in_rect( m.x, m.y, c1.x, c1.y, c2.x, c2.y ) )
			{
				state = WindowState_Move;
			}
			// Resize State
			else if( resizable )
			{
				if( point_in_rect( m.x, m.y, b1.x, b1.y, b1.x + border, b1.y + border ) )
					{ state = WindowState_Resize_TopLeft; } else
				if( point_in_rect( m.x, m.y, b2.x - border, b1.y, b2.x, b1.y + border ) )
					{ state = WindowState_Resize_TopRight; } else
				if( point_in_rect( m.x, m.y, b1.x, b2.y - border, b1.x + border, b2.y ) )
					{ state = WindowState_Resize_BottomLeft; } else
				if( point_in_rect( m.x, m.y, b2.x - border, b2.y - border, b2.x, b2.y ) )
					{ state = WindowState_Resize_BottomRight; } else
				if( point_in_rect( m.x, m.y, b1.x, b1.y + border, b1.x + border, b2.y - border ) )
					{ state = WindowState_Resize_Left; } else
				if( point_in_rect( m.x, m.y, b2.x - border, b1.y + border, b2.x, b2.y - border ) )
					{ state = WindowState_Resize_Right; } else
				if( point_in_rect( m.x, m.y, b1.x + border, b1.y, b2.x - border, b1.y + border ) )
					{ state = WindowState_Resize_Top; } else
				if( point_in_rect( m.x, m.y, b1.x + border, b2.y - border, b2.x - border, b2.y ) )
					{ state = WindowState_Resize_Bottom; }
			}


			if( state != WindowState_Resize_None )
			{
				// Mouse Anchor
				anchorMouse = int_v2 { m.x, m.y };

				// Corner Anchor
				switch( state )
				{
					case WindowState_Move:
						anchorCorner = { x, y };
						anchorMouse = anchorMouse - int_v2 { x, y };
					break;

					case WindowState_Resize_TopLeft:
						anchorCorner = { x + width, y + height };
						anchorMouse = anchorMouse - int_v2 { x, y };
					break;

					case WindowState_Resize_TopRight:
						anchorCorner = { x, y + height };
						anchorMouse = anchorMouse - int_v2 { x + width, y };
					break;

					case WindowState_Resize_BottomLeft:
						anchorCorner = { x + width, y };
						anchorMouse = anchorMouse - int_v2 { x, y + height };
					break;

					case WindowState_Resize_BottomRight:
						anchorCorner = { x, y };
						anchorMouse = anchorMouse - int_v2 { x + width, y + height };
					break;

					case WindowState_Resize_Left:
						anchorCorner = { x + width, y };
						anchorMouse = anchorMouse - int_v2 { x, y };
					break;

					case WindowState_Resize_Right:
						anchorCorner = { x, y };
						anchorMouse = anchorMouse - int_v2 { x + width, y };
					break;

					case WindowState_Resize_Top:
						anchorCorner = { x, y + height };
						anchorMouse = anchorMouse - int_v2 { x, y };
					break;

					case WindowState_Resize_Bottom:
						anchorCorner = { x, y };
						anchorMouse = anchorMouse - int_v2 { x, y + height };
					break;
				}
			}
		}
	}

	// Reset State
	if( !isInteractable || Mouse::check_released( mb_left ) )
	{
		state = WindowState_Resize_None;
	}

	// Process State
	if( state != WindowState_Resize_None )
	{
		const int_v2 dimensions = m - anchorCorner - anchorMouse;

		switch( state )
		{
			case WindowState_Move:
				x = anchorCorner.x + dimensions.x;
				y = anchorCorner.y + dimensions.y;
			break;

			case WindowState_Resize_TopLeft:
				width = clamp( -dimensions.x, widthMin, widthMax );
				x = anchorCorner.x - width;
				height = clamp( -dimensions.y, heightMin, heightMax );
				y = anchorCorner.y - height;
			break;

			case WindowState_Resize_TopRight:
				width = clamp( dimensions.x, widthMin, widthMax );
				height = clamp( -dimensions.y, heightMin, heightMax );
				y = anchorCorner.y - height;
			break;

			case WindowState_Resize_BottomLeft:
				width = clamp( -dimensions.x, widthMin, widthMax );
				x = anchorCorner.x - width;
				height = clamp( dimensions.y, heightMin, heightMax );
			break;

			case WindowState_Resize_BottomRight:
				width = clamp( dimensions.x, widthMin, widthMax );
				height = clamp( dimensions.y, heightMin, heightMax );
			break;

			case WindowState_Resize_Left:
				width = clamp( -dimensions.x, widthMin, widthMax );
				x = anchorCorner.x - width;
			break;

			case WindowState_Resize_Right:
				width = clamp( dimensions.x, widthMin, widthMax );
			break;

			case WindowState_Resize_Top:
				height = clamp( -dimensions.y, heightMin, heightMax );
				y = anchorCorner.y - height;
			break;

			case WindowState_Resize_Bottom:
				height = clamp( dimensions.y, heightMin, heightMax );
			break;
		}

		// Interact Callback
		if( callbackOnInteract ) { callbackOnInteract( *context, id ); }
	}

	// Delete Window
	if( Keyboard::check( vk_control ) && Keyboard::check_pressed( vk_backspace ) &&
		context->get_widget_top() == id )
	{
		context->destroy_widget( id );
		return;
	}
}


PROTECTED void render( const Delta delta, const Alpha alpha )
{
	// Interaction State
	const bool isInteractable = is_interactable();
	const bool isHovering = isInteractable && is_hovering();

	// Coordinates
	const int_v2 b1 = int_v2( x - border, y - border ).multiply( context->matrix_get() );
	const int_v2 b2 = int_v2( x + width + border, y + height + border ).multiply( context->matrix_get() );
	const int_v2 c1 = int_v2( x, y ).multiply( context->matrix_get() );
	const int_v2 c2 = int_v2( x + width, y + height ).multiply( context->matrix_get() );

	// Contents
	draw_rectangle( c1.x, c1.y, c2.x, c2.y, color * alpha );
	draw_rectangle( c1.x - 1, c1.y - 1, c2.x + 1, c2.y + 1,
		( ( isHovering || state ) ? c_white : c_black ) * alpha, true );

	// Scissor
	context->scissor_set_nested( c1.x, c1.y, c2.x, c2.y );

	// Caption
	if( caption[0] != '\0' ) { draw_text( fnt_iosevka, 14, c1.x + 4, c1.y + 6, c_white * alpha, caption ); }
}


// PROTECTED void apply_matrix() { INHERIT::apply_matrix(); }


PROTECTED bool contains_point( const float_v2 point )
{
	if( resizable && is_interactable() )
	{
		// Include Resize Border
		const float_v2 b1 = float_v2( x - border, y - border ).multiply( context->matrix_get() );
		const float_v2 b2 = float_v2( x + width + border, y + height + border ).multiply( context->matrix_get() );
		return point_in_rect( point.x, point.y, b1.x, b1.y, b2.x, b2.y );
	}
	else
	{
		// Only x/y/width/height
		const float_v2 b1 = float_v2( x, y ).multiply( context->matrix_get() );
		const float_v2 b2 = float_v2( x + width, y + height ).multiply( context->matrix_get() );
		return point_in_rect( point.x, point.y, b1.x, b1.y, b2.x, b2.y );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC API

PUBLIC void set_caption( const char *string )
{
	caption = string;
}


PUBLIC void set_position( const int positionX, const int positionY )
{
	x = positionX;
	y = positionY;
}


PUBLIC void set_min_width( const int minWidth )
{
	widthMin = minWidth;
	Assert( widthMin <= widthMax );
	width = max( width, widthMin );
}


PUBLIC void set_max_width( const int maxWidth )
{
	widthMax = maxWidth <= 0 ? I32_MAX : maxWidth;
	Assert( widthMax >= widthMin );
	width = min( width, widthMax );
}


PUBLIC void set_width( const int w )
{
	width = clamp( w, widthMin, widthMax );
}


PUBLIC void set_min_height( const int minHeight )
{
	heightMin = minHeight;
	Assert( heightMin <= heightMax );
	height = max( height, heightMin );
}


PUBLIC void set_max_height( const int maxHeight )
{
	heightMax = heightMax <= 0 ? I32_MAX : maxHeight;
	Assert( heightMax >= heightMin );
	height = min( width, heightMax );
}


PUBLIC void set_height( const int h )
{
	height = clamp( h, heightMin, heightMax );
}


PUBLIC void set_min_size( const int minWidth, const int minHeight )
{
	set_min_width( minWidth );
	set_min_height( minHeight );
}


PUBLIC void set_max_size( const int maxWidth, const int maxHeight )
{
	set_max_width( maxWidth );
	set_max_height( maxHeight );
}


PUBLIC void set_size( const int w, const int h )
{
	set_width( w );
	set_height( h );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////