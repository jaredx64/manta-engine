#include <object_api.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HEADER_INCLUDES
#include <core/list.hpp>
#include <core/color.hpp>
#include <manta/ui.hpp>
#include <manta/text.hpp>

SOURCE_INCLUDES
#include <manta/random.hpp>
#include <manta/draw.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OBJECT( UIWidget_TextBox )
PARENT( UIWidget )

CATEGORY( UI )
BUCKET_SIZE( 64 )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INTERNAL STATE

PROTECTED Object region;

PROTECTED bool active = false;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC STATE

PUBLIC TextEditor input;

PUBLIC int limitWidth = 0;
PUBLIC int limitHeight = 0;
PUBLIC int limitCharacters = 0;

PUBLIC bool allowWordWrap = true;
PUBLIC bool hideScrollbars = false;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CORE EVENTS

PROTECTED void init()
{
	INHERIT::init();

	// Properties
	container = true;

	// Initialize TextEditor
	input.allowNewlines = true;
	input.allowTabs = true;

	// Scrollable Region
	region = context->create_widget( ObjectType::UIWidget_ScrollableRegion, id ); Assert( region );
}


PROTECTED void free()
{
	Assert( region ); context->destroy_widget( region );
	input.deactivate();

	INHERIT::free();
}


PROTECTED void update( const Delta delta )
{
	// Interaction State
	const bool isInteractable = is_interactable();
	const bool isHovering = isInteractable && is_hovering();

	// Tweens
	tween( tweenHover, isHovering ? 1.0f : 0.0f, 0.05f, delta, 0.01f );
	tween( tweenAlert, 0.0f, 0.05f, delta, 0.01f );
	tween( tweenError, 0.0f, 0.05f, delta, 0.01f );
	tween( tweenClick, 0.0f, 0.05f, delta, 0.01f );

	// Scrollable Region
	auto regionHandle = context->handle<ObjectType::UIWidget_ScrollableRegion>( region );
	Assert( regionHandle );

	// Update Scrollable Region Dimensions
	regionHandle->x = 6;
	regionHandle->y = 6;
	regionHandle->width = width - 12;
	regionHandle->height = height - 12;
	regionHandle->hideScrollbarVertical = hideScrollbars;
	regionHandle->hideScrollbarHorizontal = hideScrollbars;
	regionHandle->hoverable = false;

	// Force update the region widget here
	//regionHandle->updateEnabled = false;
	context->update_widget( region, delta );

	// TextEditor Limits
	input->limitCharacters = limitCharacters;
	input->limitWidth = limitWidth;
	input->limitHeight = limitHeight;
	if( allowWordWrap ) { input->pageWidth = limitWidth > 0 ? limitWidth : regionHandle->viewWidth; } else
	                    { input->pageWidth = 0; }

	// Update Scrollable Region Area
	const int_v2 dimensionText = input->get_dimensions();
	const int_v2 dimensionsRegion = int_v2 { max( regionHandle->viewWidth, dimensionText.x ),
		max( regionHandle->viewHeight, dimensionText.y ) };
	regionHandle->set_scrollable_area( dimensionsRegion.x, dimensionsRegion.y );

	// Caret Scrolling
	if( CoreText::ACTIVE_TEXT_EDITOR == &input )
	{
		const int_v3 caretPos = input->get_position_from_index( input.caret_get_position() );
		const int_v2 viewVer = { regionHandle->offsetY, regionHandle->offsetY + regionHandle->viewHeight };
		const int_v2 viewHor = { regionHandle->offsetX, regionHandle->offsetX + regionHandle->viewWidth };

		auto verticalHandle = context->handle<ObjectType::UIWidget_Scrollbar>( regionHandle->scrollbarVertical );
		Assert( verticalHandle );
		if( caretPos.y < viewVer.x ) { verticalHandle->set_position_pixels( caretPos.y ); } else
		if( caretPos.z > viewVer.y ) { verticalHandle->set_position_pixels( caretPos.z - regionHandle->viewHeight ); }

		auto horizontalHandle = context->handle<ObjectType::UIWidget_Scrollbar>( regionHandle->scrollbarHorizontal );
		Assert( horizontalHandle );
		if( caretPos.x < viewHor.x ) { horizontalHandle->set_position_pixels( caretPos.x ); } else
		if( caretPos.x > viewHor.y ) { horizontalHandle->set_position_pixels( caretPos.x - regionHandle->viewWidth ); }
	}

	// Return
	if( Keyboard::check_pressed( vk_enter ) && is_activated() && !input.allowNewlines )
	{
		deactivate();
	}

	// Click
	if( Mouse::check_pressed( mb_left ) )
	{
		if( isHovering ) { activate(); } else { deactivate(); }
	}

	// Validate Activated Status
	if( active )
	{
		tweenClick = 1.0f;
		if( CoreText::ACTIVE_TEXT_EDITOR != &input ) { deactivate(); }
	}
	else
	{
		Assert( CoreText::ACTIVE_TEXT_EDITOR != &input );
	}
}


PROTECTED void render( const Delta delta, const Alpha alpha )
{
	const int_v2 p1 = int_v2( x, y ).multiply( context->matrix_get() );
	const int_v2 p2 = int_v2( x + width, y + height ).multiply( context->matrix_get() );

	// Colors
	const Color colorMain = color_mix( color_mix( color, c_white, tweenHover * 0.25f ), c_lime, tweenClick );
	const Color colorSide = color_mix( color_mix( color, c_white, tweenHover * 0.25f ), c_black, 0.85f );

	// Outline
	draw_rectangle( p1.x, p1.y, p2.x, p2.y, colorMain * alpha );
	draw_rectangle( p1.x, p1.y, p2.x, p2.y, c_black * alpha, true );

	// Body & Scissor
	draw_rectangle( p1.x + 2, p1.y + 2, p2.x - 2, p2.y - 2, colorSide * alpha );
	context->scissor_set_nested( p1.x + 2, p1.y + 2, p2.x - 2, p2.y - 2 );

	// Text Editor
	auto regionHandle = context->handle<ObjectType::UIWidget_ScrollableRegion>( region );
	Assert( regionHandle );
	input.draw( delta, p1.x + 6 - regionHandle->offsetX, p1.y + 6 - regionHandle->offsetY, alpha );
	input.screenX = p1.x + 6 - regionHandle->offsetX;
	input.screenY = p1.y + 6 - regionHandle->offsetY;

	// Locked Overlay
	if( locked ) { draw_rectangle( p1.x, p1.y, p2.x, p2.y, Color { 0, 0, 0, 150 } * alpha ); }
}


// PROTECTED void apply_matrix() { INHERIT::apply_matrix(); }


// PROTECTED bool contains_point( const float_v2 point ) { }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC API

PUBLIC void activate()
{
	if( active ) { Assert( CoreText::ACTIVE_TEXT_EDITOR == &input ); return; }
	input.activate();
	input.caret_set_position( input->length() );
	active = true;
}


PUBLIC void deactivate()
{
	if( !active ) { Assert( CoreText::ACTIVE_TEXT_EDITOR != &input ); return; }
	input.deactivate();
	input.caret_reset_selection();
	if( callbackOnInteract ) { callbackOnInteract( *context, id ); }
	active = false;
}


PUBLIC bool is_activated()
{
	return active;
}


PUBLIC void set_filter( bool ( *textFilter )( Text &, u32 ) )
{
	input->filter = textFilter;
}


PUBLIC void clear_string()
{
	input->clear();
}


PUBLIC void set_format_default( TextFormat format )
{
	input->defaultFormat = format;
}


PUBLIC void set_string( const char *buffer )
{
	input->clear();
	input->append( buffer );
}


PUBLIC void set_string( const char *buffer, const TextFormat format )
{
	input->clear();
	input->append( buffer, format );
}


PUBLIC void append_string( const char *buffer )
{
	input->append( buffer );
}


PUBLIC void append_string( const char *buffer, const TextFormat format )
{
	input->append( buffer, format );
}


PUBLIC void get_string( char *buffer, const usize size )
{
	input->cstr( buffer, size );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////