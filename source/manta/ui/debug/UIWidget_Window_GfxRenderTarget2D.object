#include <object_api.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HEADER_INCLUDES
#include <core/list.hpp>
#include <core/color.hpp>
#include <manta/ui.hpp>

SOURCE_INCLUDES
#include <manta/random.hpp>
#include <manta/draw.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OBJECT( UIWidget_Window_GfxRenderTarget2D )
PARENT( UIWidget_Window )

CATEGORY( CategoryUI )
BUCKET_SIZE( 64 )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INTERNAL STATE

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC STATE

PUBLIC GfxRenderTarget2D *rt = nullptr;

PUBLIC bool showChannelR = true;
PUBLIC bool showChannelG = true;
PUBLIC bool showChannelB = true;
PUBLIC bool showChannelA = true;
PUBLIC bool showDepth = false;
PUBLIC bool showInverted = false;

PUBLIC Object widgetChannelR;
PUBLIC Object widgetChannelG;
PUBLIC Object widgetChannelB;
PUBLIC Object widgetChannelA;
PUBLIC Object widgetDepth;
PUBLIC Object widgetInverted;

PUBLIC const char *name;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CORE EVENTS

PROTECTED void init()
{
	INHERIT::init();

	int bX = 4;
	int bY = 40;

	widgetChannelR = context->create_widget_button( UIWidget_Button, bX, bY, 24, 24, id ); Assert( widgetChannelR );
	bX += 28;
 	auto handleChannelR = context->handle<UIWidget_Button>( widgetChannelR ); Assert( handleChannelR );
	handleChannelR->set_label( "R" );
	handleChannelR->callbackOnInteract = []( UIContext &context, Object widget )
		{
			auto widgetHandle = context.handle<UIWidget_Button>( widget ); Assert( widgetHandle );
			auto parentHandle = context.handle<UIWidget_Window_GfxRenderTarget2D>( widgetHandle->parent );
			Assert( parentHandle );
			parentHandle->showChannelR = !parentHandle->showChannelR;
		};

	widgetChannelG = context->create_widget_button( UIWidget_Button, bX, bY, 24, 24, id ); Assert( widgetChannelG );
	bX += 28;
 	auto handleChannelG = context->handle<UIWidget_Button>( widgetChannelG ); Assert( handleChannelG );
	handleChannelG->set_label( "G" );
	handleChannelG->callbackOnInteract = []( UIContext &context, Object widget )
		{
			auto widgetHandle = context.handle<UIWidget_Button>( widget ); Assert( widgetHandle );
			auto parentHandle = context.handle<UIWidget_Window_GfxRenderTarget2D>( widgetHandle->parent );
			Assert( parentHandle );
			parentHandle->showChannelG = !parentHandle->showChannelG;
		};

	widgetChannelB = context->create_widget_button( UIWidget_Button, bX, bY, 24, 24, id ); Assert( widgetChannelB );
	bX += 28;
 	auto handleChannelB = context->handle<UIWidget_Button>( widgetChannelB ); Assert( handleChannelB );
	handleChannelB->set_label( "B" );
	handleChannelB->callbackOnInteract = []( UIContext &context, Object widget )
		{
			auto widgetHandle = context.handle<UIWidget_Button>( widget ); Assert( widgetHandle );
			auto parentHandle = context.handle<UIWidget_Window_GfxRenderTarget2D>( widgetHandle->parent );
			Assert( parentHandle );
			parentHandle->showChannelB = !parentHandle->showChannelB;
		};

	widgetChannelA = context->create_widget_button( UIWidget_Button, bX, bY, 24, 24, id ); Assert( widgetChannelA );
	bX += 28;
 	auto handleChannelA = context->handle<UIWidget_Button>( widgetChannelA ); Assert( handleChannelA );
	handleChannelA->set_label( "A" );
	handleChannelA->callbackOnInteract = []( UIContext &context, Object widget )
		{
			auto widgetHandle = context.handle<UIWidget_Button>( widget ); Assert( widgetHandle );
			auto parentHandle = context.handle<UIWidget_Window_GfxRenderTarget2D>( widgetHandle->parent );
			Assert( parentHandle );
			parentHandle->showChannelA = !parentHandle->showChannelA;
		};

	widgetDepth = context->create_widget_button( UIWidget_Button, bX, bY, 48, 24, id ); Assert( widgetChannelA );
	bX += 52;
 	auto handleDepth = context->handle<UIWidget_Button>( widgetDepth ); Assert( handleDepth );
	handleDepth->set_label( "Depth" );
	handleDepth->callbackOnInteract = []( UIContext &context, Object widget )
		{
			auto widgetHandle = context.handle<UIWidget_Button>( widget ); Assert( widgetHandle );
			auto parentHandle = context.handle<UIWidget_Window_GfxRenderTarget2D>( widgetHandle->parent );
			Assert( parentHandle );
			parentHandle->showDepth = !parentHandle->showDepth;
		};

	widgetInverted = context->create_widget_button( UIWidget_Button, bX, bY, 48, 24, id ); Assert( widgetInverted );
	bX += 52;
 	auto handleInverted = context->handle<UIWidget_Button>( widgetInverted ); Assert( handleInverted );
	handleInverted->set_label( "Flip Y" );
	handleInverted->callbackOnInteract = []( UIContext &context, Object widget )
		{
			auto widgetHandle = context.handle<UIWidget_Button>( widget ); Assert( widgetHandle );
			auto parentHandle = context.handle<UIWidget_Window_GfxRenderTarget2D>( widgetHandle->parent );
			Assert( parentHandle );
			parentHandle->showInverted = !parentHandle->showInverted;
		};
}


PROTECTED void free()
{
	// Widgets
	Assert( widgetChannelR ); context->destroy_widget( widgetChannelR );
	Assert( widgetChannelG ); context->destroy_widget( widgetChannelG );
	Assert( widgetChannelB ); context->destroy_widget( widgetChannelB );
	Assert( widgetChannelA ); context->destroy_widget( widgetChannelA );
	Assert( widgetDepth ); context->destroy_widget( widgetDepth );
	Assert( widgetInverted ); context->destroy_widget( widgetInverted );
	INHERIT::free();
}


PROTECTED void update( const Delta delta )
{
	if( rt == nullptr ) { context->destroy_widget( id ); return; }
	const Color colorEnabled = Color { 189, 152, 117 };
	const Color colorDisabled = c_dkgray;

	widthMin = 220;
	widthMax = rt->width;
	heightMax = rt->height + 68;

 	auto handleChannelR = context->handle<UIWidget_Button>( widgetChannelR ); Assert( handleChannelR );
	handleChannelR->color = showChannelR ? colorEnabled : colorDisabled;

 	auto handleChannelG = context->handle<UIWidget_Button>( widgetChannelG ); Assert( handleChannelG );
	handleChannelG->color = showChannelG ? colorEnabled : colorDisabled;

 	auto handleChannelB = context->handle<UIWidget_Button>( widgetChannelB ); Assert( handleChannelB );
	handleChannelB->color = showChannelB ? colorEnabled : colorDisabled;

 	auto handleChannelA = context->handle<UIWidget_Button>( widgetChannelA ); Assert( handleChannelA );
	handleChannelA->color = showChannelA ? colorEnabled : colorDisabled;

 	auto handleDepth = context->handle<UIWidget_Button>( widgetDepth ); Assert( handleDepth );
	handleDepth->color = showDepth ? colorEnabled : colorDisabled;
	handleDepth->locked = rt->desc.depthFormat == GfxDepthFormat_NONE;

 	auto handleInverted = context->handle<UIWidget_Button>( widgetInverted ); Assert( handleInverted );
	handleInverted->color = showInverted ? colorEnabled : colorDisabled;

	INHERIT::update( delta );
}


PROTECTED void render( const Delta delta )
{
	if( rt == nullptr ) { context->destroy_widget( id ); return; }
	INHERIT::render( delta );

	// Coordinates
	const intv2 b1 = intv2( x - border, y - border ).multiply( context->matrix_get() );
	const intv2 b2 = intv2( x + width + border, y + height + border ).multiply( context->matrix_get() );
	const intv2 c1 = intv2( x, y ).multiply( context->matrix_get() );
	const intv2 c2 = intv2( x + width, y + height ).multiply( context->matrix_get() );

	// Scale
	const float scaleX = ( width < rt->width ) ? ( width / static_cast<float>( rt->width ) ) : 1.0;
	const float scaleY = ( height < rt->height ) ? ( height / static_cast<float>( rt->height ) ) : 1.0;
	const float scale = min( scaleX, scaleY );
	width = max( static_cast<int>( rt->width * scale ), widthMin );
	height = max( static_cast<int>( 68 + ( rt->height * scale ) ), heightMin );

	// Name
	draw_text_f( fnt_iosevka.bold(), 14, c1.x + 4, c1.y + 4, c_white, name );

	// Format
	char format[256];
	snprintf( format, sizeof( format ), "%s | %s | %.2f MB",
		GfxCore::colorFormatName[rt->desc.colorFormat],
		GfxCore::colorFormatName[rt->desc.depthFormat],
		MB( GFX_SIZE_IMAGE_COLOR_BYTES( rt->width, rt->height, 1, rt->desc.colorFormat ) +
		GFX_SIZE_IMAGE_DEPTH_BYTES( rt->width, rt->height, 1, rt->desc.depthFormat ) ) );
	draw_text_f( fnt_iosevka, 12, c1.x + 4, c1.y + 24, c_white, format );

	// Background
	const int x1 = c1.x;
	const int y1 = c1.y + 68;
	const int x2 = c1.x + rt->width * scale;
	const int y2 = c1.y + 68 + rt->height * scale;
	draw_rectangle( x1, y1, x2, y2, c_black );

	// Texture Resource
	GfxColorWriteFlag flags = GfxColorWriteFlag_NONE;
	if( showChannelR ) { flags |= GfxColorWriteFlag_RED; }
	if( showChannelG ) { flags |= GfxColorWriteFlag_GREEN; }
	if( showChannelB ) { flags |= GfxColorWriteFlag_BLUE; }
	if( showChannelA ) { flags |= GfxColorWriteFlag_ALPHA; }
	Gfx::set_color_write_mask( flags );
	{
		const u16 u1 = 0x0000;
		const u16 v1 = showInverted ? 0xFFFF : 0x0000;
		const u16 u2 = 0xFFFF;
		const u16 v2 = showInverted ? 0x0000 : 0xFFFF;

		GfxTexture2D &texture = showDepth ? rt->textureDepth : rt->textureColor;
		if( texture.resource != nullptr )
		{
			texture.bind( 0 );
			draw_quad_uv( x1, y1, x2, y2, u1, v1, u2, v2 );
		}
	}
	Gfx::set_color_write_mask( GfxColorWriteFlag_ALL );
}


// PROTECTED void apply_matrix() { INHERIT::apply_matrix(); }


// PROTECTED bool contains_point( const floatv2 point ) { }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PUBLIC API