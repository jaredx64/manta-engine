{
	"name": "HLSL",
	"scopeName": "source.hlsl",
	"patterns": [
		{ "include": "#numbers" },
		{ "include": "#backslash" },

		{ "name": "keyword.control.hlsl",                    "match": "\\b(break|case|continue|default|discard|do|else|for|if|return|switch|while)\\b" },
		{ "name": "keyword.language.hlsl",                   "match": "\\b(cbuffer|register|struct)\\b" },
		{ "name": "constant.language.hlsl",                  "match": "\\b(false|true)\\b" },
		{ "name": "storage.modifier.hlsl",                   "match": "\\b(const|in|out|static|uniform)\\b" },
		{ "name": "storage.modifier.interpolation.hlsl",     "match": "\\b(centroid|linear|nointerpolation|noperspective|sample)\\b" },
		{ "name": "storage.type.built-in.primitive.hlsl",    "match": "\\b(bool|double|dword|float|half|int|min10float|min12int|min16float|min16int|min16uint|uint)(\\d(x\\d)?)?\\b" },
		{ "name": "storage.type.built-in.primitive.hlsl",    "match": "\\b(float16_t|int16_t|int64_t|matrix|snorm|uint16_t|uint64_t|unorm|vector|void)\\b" },
		{ "name": "support.type.hlsl",                       "match": "\\b(Buffer|SamplerState|Texture1D|Texture1DArray|Texture2D|Texture2DArray|Texture3D|TextureCube)\\b" },

		{ "name": "support.function.hlsl",                   "match": "\\b[a-zA-Z_]\\w*\\b(?=\\s*\\()" },
		{ "name": "support.semantic.hlsl",                   "match": "\\b(?<=:\\s*)[a-zA-Z_]\\w*\\b" },
		{ "name": "support.type.hlsl",                       "match": "\\b[a-zA-Z_]\\w*_t\\b" },

		{ "name": "comment.line.double-slash.splitter.hlsl", "begin": "//~",  "end": "$",    "patterns": [{ "include": "#comment-scope" }] },
		{ "name": "comment.line.double-slash.hlsl",          "begin": "//",   "end": "$",    "patterns": [{ "include": "#comment-scope" }] },
		{ "name": "comment.block.hlsl",                      "begin": "/\\*", "end": "\\*/", "patterns": [{ "include": "#comment-scope" }] },

		{ "name": "punctuation.begin.bracket.round.hlsl",    "match": "\\(" },
		{ "name": "punctuation.end.bracket.round.hlsl",      "match": "\\)" },
		{ "name": "punctuation.begin.bracket.square.hlsl",   "match": "\\[" },
		{ "name": "punctuation.end.bracket.square.hlsl",     "match": "\\]" },
		{ "name": "punctuation.begin.bracket.curly.hlsl",    "match": "{" },
		{ "name": "punctuation.end.bracket.curly.hlsl",      "match": "}" },
		{ "name": "punctuation.separator.delimiter.hlsl",    "match": "," },
		{ "name": "punctuation.separator.dot-access.hlsl",   "match": "\\." },
		{ "name": "punctuation.separator.colon.hlsl",        "match": ":" },
		{ "name": "punctuation.terminator.statement.hlsl",   "match": ";" },

		{ "include": "#operators" },

		{
			"name": "meta.preprocessor.hlsl",
			"match": "^\\s*((#)\\s*(ifdef|ifndef))\\b\\s*([a-zA-Z_]\\w*)?\\b",
			"captures": {
				"1": { "name": "keyword.control.directive.conditional.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" },
				"4": { "name": "entity.name.function.preprocessor.hlsl" }
			}
		},
		{
			"name": "meta.preprocessor.hlsl",
			"begin": "^\\s*((#)\\s*(if|elif))\\b",
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"beginCaptures": {
				"1": { "name": "keyword.control.directive.conditional.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" }
			},
			"patterns": [
				{ "include": "#numbers" },
				{ "include": "#operators" },
				{ "include": "#backslash" },
				{ "name": "keyword.control.directive.conditional.defined.hlsl", "match": "\\bdefined\\b" }
			]
		},
		{
			"name": "meta.preprocessor.hlsl",
			"match": "^\\s*((#)\\s*(else|endif))\\b",
			"captures": {
				"1": { "name": "keyword.control.directive.conditional.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" }
			}
		},
		{
			"name": "meta.preprocessor.hlsl",
			"match": "^\\s*((#)\\s*undef)\\b\\s*([a-zA-Z_]\\w*)?\\b",
			"captures": {
				"1": { "name": "keyword.control.directive.undef.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" },
				"3": { "name": "entity.name.function.preprocessor.hlsl" }
			}
		},
		{
			"name": "meta.preprocessor.macro.hlsl",
			"match": "^\\s*((#)\\s*define)\\b\\s*([a-zA-Z_]\\w*)?((\\()([^)]*)(\\)))?",
			"captures": {
				"1": { "name": "keyword.control.directive.define.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" },
				"3": { "name": "entity.name.function.preprocessor.hlsl" },
				"5": { "name": "punctuation.definition.parameters.begin.hlsl" },
				"6": {
					"patterns": [
						{
							"match": "(?<=[(,])\\s*((?<!\\w)[a-zA-Z_]\\w*(?!\\w))\\s*",
							"captures": { "1": { "name": "variable.parameter.preprocessor.hlsl" } }
						},
						{ "match": ",", "name": "punctuation.separator.parameters.hlsl" }
					]
				},
				"7": { "name": "punctuation.definition.parameters.end.hlsl" }
			}
		},
		{
			"name": "meta.preprocessor.include.hlsl",
			"begin": "^\\s*((#)\\s*(include|include_next))\\b",
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"beginCaptures": {
				"1": { "name": "keyword.control.directive.include.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" }
			},
			"patterns": [
				{ "name": "string.quoted.double.include.hlsl",      "begin": "\"", "end": "$|\"" },
				{ "name": "string.quoted.other.lt-gt.include.hlsl", "begin": "<",  "end": "$|>" }
			]
		},
		{
			"name": "meta.preprocessor.error.hlsl",
			"begin": "^\\s*((#)\\s*error)\\b(\\s+.*)?",
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"beginCaptures": {
				"1": { "name": "keyword.control.directive.error.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" },
				"3": { "name": "string.unquoted.preprocessor.message.hlsl" }
			},
			"patterns": [
				{ "include": "#backslash" }
			]
		},
		{
			"name": "meta.preprocessor.pragma.hlsl",
			"begin": "^\\s*((#)\\s*pragma)\\b",
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"beginCaptures": {
				"1": { "name": "keyword.control.directive.pragma.hlsl" },
				"2": { "name": "punctuation.definition.directive.hlsl" }
			},
			"patterns": [
				{ "include": "#numbers" },
				{ "include": "#backslash" },

				{ "name": "entity.other.attribute-name.preprocessor.hlsl", "match": "\\b[a-zA-Z_]\\w*\\b" }
			]
		}
	],
	"repository": {
		"numbers": {
			"patterns": [
				{ "name": "constant.numeric.decimal.hlsl",     "match": "\\b[0-9]+\\.[0-9]+[fF]?\\b" },
				{ "name": "constant.numeric.decimal.hlsl",     "match": "\\b[0-9]+\\b" },
				{ "name": "constant.numeric.hexadecimal.hlsl", "match": "\\b0[xX][a-fA-F0-9]+\\b" }
			]
		},
		"operators": {
			"patterns": [
				{ "name": "keyword.operator.increment.hlsl",                   "match": "\\+\\+" },
				{ "name": "keyword.operator.decrement.hlsl",                   "match": "--" },
				{ "name": "keyword.operator.assignment.compound.hlsl",         "match": "\\+=|-=|\\*=|/=|%=" },
				{ "name": "keyword.operator.assignment.compound.bitwise.hlsl", "match": "&=|\\|=|\\^=|<<=|>>=" },
				{ "name": "keyword.operator.bitwise.shift.hlsl",               "match": "<<|>>" },
				{ "name": "keyword.operator.comparison.hlsl",                  "match": "!=|<=|>=|==|<|>" },
				{ "name": "keyword.operator.logical.hlsl",                     "match": "!|&&|\\|\\|" },
				{ "name": "keyword.operator.hlsl",                             "match": "\\+|-|\\*|/|%|&|\\||\\^|~" },
				{ "name": "keyword.operator.assignment.hlsl",                  "match": "=" },
				{ "name": "keyword.operator.ternary.hlsl",                     "match": "\\?" }
			]
		},
		"backslash": {
			"patterns": [
				{ "match": "(\\\\)\\n", "captures": { "1": { "name": "constant.character.escape.line-continuation.hlsl" } } }
			]
		},
		"comment-scope": {
			"patterns": [
				{ "name": "string.quoted.double.hlsl",      "begin": "`", "end": "$|`" },
				{ "name": "comment.keyword.todo.hlsl",      "match": "\\bTODO\\b" },
				{ "name": "comment.keyword.note.hlsl",      "match": "\\bNOTE\\b" },
				{ "name": "comment.keyword.hack.hlsl",      "match": "\\bHACK\\b" },
				{ "name": "comment.keyword.metadata.hlsl",  "match": "\\$[a-zA-Z_]\\w*\\b" },
				{ "name": "comment.keyword.attribute.hlsl", "match": "\\@[a-zA-Z_]\\w*\\b" }
			]
		}
	}
}
