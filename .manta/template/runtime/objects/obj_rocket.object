#include <object_api.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes

HEADER_INCLUDES
// ...

SOURCE_INCLUDES
#include <scene.hpp>
#include <manta/window.hpp>
#include <manta/input.hpp>
#include <manta/draw.hpp>
#include <core/math.hpp>
#include <manta/random.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Object

OBJECT( obj_rocket )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Data

PUBLIC float x = 0.0f;
PUBLIC float y = 0.0f;
PUBLIC float direction = 0.0f;
PUBLIC float speed = 0.0f;
PUBLIC float shootTimer = 1.0f;
PUBLIC bool shootSide = false;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Events

EVENT_CREATE
{
	x = Window::width * 0.5f;
	y = Window::height * 0.5f;
}

EVENT_UPDATE
{
	// Direction
	if( Keyboard::check( vk_a ) ) { direction -= 180.0f * delta; }
	if( Keyboard::check( vk_d ) ) { direction += 180.0f * delta; }
	if( Keyboard::check( vk_w ) ) { speed += 160.0f * delta; }
	if( Keyboard::check( vk_s ) ) { speed -= 120.0f * delta; }
	speed = clamp( speed, -60.0f, 240.0f );

	// Wrap around screen
	x = wrap( x, 0.0f, static_cast<float>( Window::width ) );
	y = wrap( y, 0.0f, static_cast<float>( Window::height ) );

	// Movement
	x += lengthdir_x( speed * delta, direction );
	y += lengthdir_y( speed * delta, direction );

	// Projectiles
	shootTimer += delta;
	if( Keyboard::check( vk_space ) )
	{
		if( shootTimer >= ( Keyboard::check( vk_control ) ? 0.01f : 0.1f ) )
		{
			// Create Projectile
			ObjectInstance projectile = Scene::objects.create( Object::obj_projectile );
			if( auto handle = projectile.handle<Object::obj_projectile>( Scene::objects ); handle )
			{
				const float spawnX = lengthdir_x( 28, direction + ( shootSide ? 90.0f : -90.0f ) ) +
					lengthdir_x( 20, direction );
				const float spawnY = lengthdir_y( 28, direction + ( shootSide ? 90.0f : -90.0f ) ) +
					lengthdir_y( 20, direction );

				handle->x = x + spawnX;
				handle->y = y + spawnY;

				Random random;
				handle->direction = direction + random.next_float( -4.0f, 4.0f );
				handle->speed = speed + 500.0f;

				speed -= 0.5f;
			}

			// Reset timer & alternate shoot side
			shootTimer = 0.0f;
			shootSide = !shootSide;
		}
	}

	// Death
	for( auto asteroid : Scene::objects.iterator_all<Object::obj_asteroid>() )
	{
		const float radiusSqr = ( asteroid->radius * asteroid->size ) * ( asteroid->radius * asteroid->size );
		if( float_v2_distance_sqr( { x, y }, { asteroid->x, asteroid->y } ) < radiusSqr )
		{
			Scene::objects.destroy( id );
			return;
		}
	}
}

EVENT_RENDER
{
	draw_sprite_angle( Sprite::spr_rocket_ship, 0, x, y, direction, 1.0f, 1.0f, c_white, 0.0f );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions